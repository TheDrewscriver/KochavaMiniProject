package main

import (
	"encoding/json"
	"fmt"
	"gopkg.in/confluentinc/confluent-kafka-go.v1/kafka"
	"net/url"
	"regexp"
	"strings"
	"net/http"
)


type AutoGenerated struct {
	Endpoint struct {
		Method string `json:"method"`
		URL    string `json:"url"`
	} `json:"endpoint"`
	Data map[string]string `json:"data"`
}

func doReplace( URL string, DataMap map[string]string) string {
	//var ReturnURL string =URL
	for k, v := range DataMap {
		var StringKey string="{"+k+"}"
		if len(v)>0 {
			URL=strings.ReplaceAll(URL,StringKey,url.QueryEscape(v))
		} else{
			URL=strings.ReplaceAll(URL,StringKey,"")
		}
	}
	//Replace any unchanged values with null
	regex := regexp.MustCompile(`={.*}`)
	URL= string(regex.ReplaceAll([]byte(URL),[]byte("=")))
	return URL
}

func main() {

	c, err := kafka.NewConsumer(&kafka.ConfigMap{
		"bootstrap.servers": "localhost",
		"group.id":          "myGroup",
		"auto.offset.reset": "earliest",
	})

	if err != nil {
		panic(err)
	}

	c.SubscribeTopics([]string{"test", "^aRegex.*[Tt]opic"}, nil)

	for {
		msg, err1 := c.ReadMessage(-1)
		if err1 == nil {
			var messageReceived []byte =msg.Value
			incomingData := &AutoGenerated{}
			err2 := json.Unmarshal(messageReceived, &incomingData)
			if err2 != nil {
				fmt.Println(err2)
			}
			var URL string=doReplace(incomingData.Endpoint.URL,incomingData.Data)
				// b, err3 := json.Marshal(incomingData.endpointValue)
				// fmt.Println(err3)
				fmt.Println(URL)
			resp, httpError :=http.Get(URL)
			if resp.StatusCode!=200 {
				//log error
			}
			if httpError != nil {
				panic(httpError)
			}
			fmt.Printf("Message on %s: %s\n", msg.TopicPartition, string(msg.Value))
		} else {
			// The client will automatically try to recover from all errors.
			fmt.Printf("Consumer error: %v (%v)\n", err, msg)
		}
	}

	c.Close()
}
